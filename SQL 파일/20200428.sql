-- 책에 대한 리뷰와 평점을 담는 테이블
CREATE TABLE SAMPLE_BOOK_REVIEWS (
    REVIEW_NO NUMBER(7,0)               CONSTRAINT REVIEW_NO_PK PRIMARY KEY,
    REVIEW_CONTENT VARCHAR2(2000)      CONSTRAINT REVIEW_CONTENT_NN NOT NULL,
    REVIEW_POINT NUMBER(1,0)           CONSTRAINT REVIEW_POINT_CK CHECK (REVIEW_POINT >= 0 AND REVIEW_POINT <= 5),
    REVIEW_REGISTERED_DATE DATE        DEFAULT SYSDATE,
    BOOK_NO NUMBER(7,0)                CONSTRAINT REVIEW_BOOKNO_FK REFERENCES SAMPLE_BOOKS (BOOK_NO),
    USER_ID VARCHAR2(50)               CONSTRAINT REVIEW_USERID_FK REFERENCES SAMPLE_BOOK_USERS (USER_ID),
    CONSTRAINT REVIEWS_UK UNIQUE (BOOK_NO, USER_ID)
);

CREATE SEQUENCE SAMPLE_REVIEW_SEQ NOCACHE;

INSERT INTO SAMPLE_BOOK_REVIEWS
(REVIEW_NO, REVIEW_CONTENT, REVIEW_POINT, BOOK_NO, USER_ID)
VALUES
(SAMPLE_REVIEW_SEQ.NEXTVAL, '아주 좋은 내용이었습니다.', 5, 100008, 'hong');

INSERT INTO SAMPLE_BOOK_REVIEWS
(REVIEW_NO, REVIEW_CONTENT, REVIEW_POINT, BOOK_NO, USER_ID)
VALUES
(SAMPLE_REVIEW_SEQ.NEXTVAL, '잘 읽었습니다.', 5, 100008, 'hong5678');

INSERT INTO SAMPLE_BOOK_REVIEWS
(REVIEW_NO, REVIEW_CONTENT, REVIEW_POINT, BOOK_NO, USER_ID)
VALUES
(SAMPLE_REVIEW_SEQ.NEXTVAL, '아주 좋은 내용이었습니다.', 2, 100007, 'hong');

COMMIT;

CREATE TABLE SAMPLE_BOOK_LIKES (
    BOOK_NO NUMBER(7,0) NOT NULL,
    USER_ID VARCHAR2(50) NOT NULL,
    CONSTRAINT LIKES_BOOKNO_FK FOREIGN KEY (BOOK_NO) REFERENCES SAMPLE_BOOKS (BOOK_NO),
    CONSTRAINT LIKES_USERID_FK FOREIGN KEY (USER_ID) REFERENCES SAMPLE_BOOK_USERS (USER_ID),
    CONSTRAINT LIKES_UK UNIQUE (BOOK_NO, USER_ID)
);

CREATE OR REPLACE VIEW EMP_SALARY_GRADE_VIEW
AS SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.SALARY, B.GRA
FROM EMPLOYEES A, JOB_GRADES B
WHERE A.SALARY >= B.LOWEST_SAL AND A.SALARY <= B.HIGHEST_SAL;

CREATE OR REPLACE VIEW EMP_SALARY_VIEW
AS SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, 
SALARY * 4 * 12 + SALARY * NVL(COMMISSION_PCT, 0) * 4 * 12 ANNUAL_SALARY
FROM EMPLOYEES;

-- 인라인뷰 사용하기
SELECT ID, NAME, SALARY, DEPTID
FROM(SELECT
EMPLOYEE_ID ID
, FIRST_NAME || ' ' || LAST_NAME NAME
, SALARY
, DEPARTMENT_ID DEPTID
FROM EMPLOYEES
)
WHERE DEPTID = 60;

-- 전체 직원 중에서 자신이 소속된 부서의 평균급여보다 급여를 적게 받는 
-- 사원의 아이디, 이름, 급여, 부서아이디, 부서의 평균급여를 조회하기
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.SALARY, B.DEPTID, B.AVG_SALARY
FROM EMPLOYEES A, (SELECT DEPARTMENT_ID DEPTID, TRUNC(AVG(SALARY)) AVG_SALARY
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID IS NOT NULL
    GROUP BY DEPARTMENT_ID) B
WHERE A.DEPARTMENT_ID = B.DEPTID
AND A.SALARY < B.AVG_SALARY
ORDER BY A.EMPLOYEE_ID ASC;

-- 부서아이디, 부서명, 부서별 사원수, 도시명을 출력하기
SELECT A.DEPARTMENT_ID, A.DEPARTMENT_NAME, B.CITY, C.CNT
FROM DEPARTMENTS A, LOCATIONS B, (SELECT DEPARTMENT_ID DEPT_ID, COUNT(*) CNT
                                  FROM EMPLOYEES
                                  GROUP BY DEPARTMENT_ID) C
WHERE A.LOCATION_ID = B.LOCATION_ID
AND A.DEPARTMENT_ID = C.DEPT_ID
ORDER BY A.DEPARTMENT_ID ASC;

commit;