-- Top-N 분석

-- 50번 부서에 소속된 사원 중에서 급여를 가장 많이 받는 직원 3명을 조회하기
SELECT ROWNUM, SALARY, FIRST_NAME
FROM (SELECT SALARY, FIRST_NAME
      FROM EMPLOYEES
      WHERE DEPARTMENT_ID = 50
      ORDER BY SALARY DESC)
WHERE ROWNUM <= 3;

-- 부서별 사원수를 계산했을 때 사원수가 가장 많은 부서 3곳을 조회하기
SELECT ROWNUM, DEPARTMENT_ID, CNT
FROM (SELECT DEPARTMENT_ID, COUNT(*) CNT
      FROM EMPLOYEES
      GROUP BY DEPARTMENT_ID
      ORDER BY CNT DESC)
WHERE ROWNUM <= 3;

-- 부서별 사원수를 계산했을 때 사원수가 가장 많은 부서 3곳을 조회하기
-- 부서아이디, 부서명, 사원수가 출력되어야 함.
SELECT *
FROM DEPARTMENTS A, (SELECT ROWNUM RANKING, DEPARTMENT_ID, CNT
                     FROM (SELECT DEPARTMENT_ID, COUNT(*) CNT
                           FROM EMPLOYEES
                           GROUP BY DEPARTMENT_ID
                           ORDER BY CNT DESC)
                     WHERE ROWNUM <= 3) B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;

-- 가격이 가장 비싼 책 3권을 조회하기
-- 순위, 제목, 가격이 출력되어야 함 
SELECT ROWNUM RANKING, BOOK_TITLE, BOOK_PRICE
FROM (SELECT BOOK_TITLE, BOOK_PRICE
      FROM SAMPLE_BOOKS
      ORDER BY BOOK_PRICE DESC)
      WHERE ROWNUM <= 3;
      
-- 가격이 가장 비싼 책 3권을 조회했을 때
-- 최근 1주일 이내에 이 책을 산 사용자를 조회하기
-- 사용자아이디, 사용자명, 책제목, 구매가격, 구매수량, 구매날짜가 출력되어야 함
SELECT A.USER_ID, A.USER_NAME, B.BOOK_TITLE, C.ORDER_AMOUNT, C.ORDER_REGISTERED_DATE, C.ORDER_PRICE
FROM SAMPLE_BOOK_USERS A, (SELECT ROWNUM RANKING, BOOK_TITLE, BOOK_NO, BOOK_PRICE
                           FROM (SELECT BOOK_TITLE, BOOK_NO, BOOK_PRICE
                           FROM SAMPLE_BOOKS
                           ORDER BY BOOK_PRICE DESC)
                           WHERE ROWNUM <= 3) B, SAMPLE_BOOK_ORDERS C
WHERE A.USER_ID = C.USER_ID
      AND B.BOOK_NO = C.BOOK_NO
      AND C.ORDER_REGISTERED_DATE > SYSDATE - 7;
      
-- 구매총액을 계산했을 때 구매총액이 가장 많은 사용자의
-- 아이디, 이름, 총구매금액을 조회하기
SELECT A.USER_ID, A.USER_NAME, B.TOTAL_PRICE
FROM SAMPLE_BOOK_USERS A, (SELECT USER_ID, TOTAL_PRICE
                           FROM(SELECT USER_ID, SUM(ORDER_PRICE * ORDER_AMOUNT) TOTAL_PRICE
                                FROM SAMPLE_BOOK_ORDERS
                                GROUP BY USER_ID
                                ORDER BY TOTAL_PRICE DESC)
                           WHERE ROWNUM = 1) B
WHERE A.USER_ID = B.USER_ID;

-- 분석함수 사용하기
-- 급여를 기준으로 정렬해서 순번 부여하기
SELECT ROW_NUMBER() OVER(ORDER BY SALARY DESC), SALARY, FIRST_NAME
FROM EMPLOYEES;

-- 급여를 기준으로 내림차순 정렬해서 순번을 부여했을 때 급여순위가 11~20위에 해당하는 직원의
-- 순번, 아이디, 이름, 급여를 조회하기
SELECT NUM, EMPLOYEE_ID, FIRST_NAME, SALARY
FROM (SELECT ROW_NUMBER() OVER(ORDER BY SALARY DESC) NUM, EMPLOYEE_ID, FIRST_NAME, SALARY
      FROM EMPLOYEES)
WHERE NUM >= 11 AND NUM <= 20;

-- 부서별로 급여를 기준으로 내림차순 정렬해서 순번을 부여하기
SELECT 
    ROW_NUMBER() OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC) NUM,
    DEPARTMENT_ID, SALARY, FIRST_NAME
FROM EMPLOYEES;

-- 부서별로 급여를 기준으로 내림차순 정렬해서 순번을 부여했을 때
-- 해당 부서에서 가장 급여를 많이 받는 직원의
-- 이름, 급여, 부서아이디를 조회하기
SELECT FIRST_NAME, SALARY, DEPARTMENT_ID
FROM (SELECT ROW_NUMBER() OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC) NUM,
             FIRST_NAME, SALARY, DEPARTMENT_ID
      FROM EMPLOYEES)
WHERE NUM = 1;

SELECT ROW_NUMBER() OVER(ORDER BY SALARY DESC) ROW_NUMBER,
       RANK()       OVER(ORDER BY SALARY DESC) RANK,
       DENSE_RANK() OVER(ORDER BY SALARY DESC) DENSE_RANK,
       SALARY
FROM EMPLOYEES;

-- ROW NUMBER() OVER()를 활용해서 데이터를 특정 컬럼값을 기준으로 범위별로 나눠서 조회하기
SELECT *
FROM (SELECT ROW_NUMBER() OVER(ORDER BY EMPLOYEE_ID ASC) NUM, EMPLOYEE_ID, FIRST_NAME
      FROM EMPLOYEES)
WHERE NUM >= 1 AND NUM <= 10;

SELECT *
FROM (SELECT ROW_NUMBER() OVER(ORDER BY EMPLOYEE_ID ASC) NUM, EMPLOYEE_ID, FIRST_NAME
      FROM EMPLOYEES)
WHERE NUM >= 11 AND NUM <= 20;

SELECT FIRST_VALUE(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC), 
       DEPARTMENT_ID, SALARY, FIRST_NAME
FROM EMPLOYEES
ORDER BY DEPARTMENT_ID;

-- 새로운 일련번호 조회
SELECT SAMPLE_ORDER_SEQ.NEXTVAL FROM DAUL;
-- 현재 시퀀스의 일련번호 조회
SELECT SAMPLE_ORDER_SEQ.CURRVAL FROM DUAL;

CREATE INDEX SAMPLE_USER_IDX
ON SAMPLE_BOOK_USERS (USER_NAME);

CREATE INDEX SAMPLE_ORDER_DATE_IDX
ON SAMPLE_BOOK_ORDERS (TO_CHAR(ORDER_REGISTERED_DATE, 'YYYY-MM-DD'));

SELECT *
FROM SAMPLE_BOOK_USERS
WHERE USER_NAME = '홍길동';

SELECT *
FROM EMPLOYEES
WHERE LAST_NAME = 'King';

SELECT *
FROM SAMPLE_BOOK_ORDERS
WHERE TO_CHAR(ORDER_REGISTERED_DATE, 'YYYY-MM-DD') = '2020-04-28';