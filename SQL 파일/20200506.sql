--1. 급여가 5000이상 12000이하인 사원의 아이디, 이름, 급여를 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >= 5000
AND SALARY <= 12000;

--2. 사원들이 소속된 부서의 부서명을 중복없이 조회하기
SELECT DISTINCT B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;

--3. 2007년에 입사한 사원의 아이디, 이름, 입사일을 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE TO_CHAR(HIRE_DATE, 'YYYY') = '2007';

--4. 급여가 5000이상 12000이하이고, 20번과 50번 부서에 소속된 사원의 아이디, 이름, 급여, 소속부서명을 조회하기
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.SALARY, B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND A.SALARY >= 5000
AND A.SALARY <= 12000
AND A.DEPARTMENT_ID IN (20,50)
ORDER BY EMPLOYEE_ID ASC;

--5. 100번 직원에게 보고하는 사원의 아이디, 이름, 급여, 급여등급을 조회하기
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.SALARY, B.GRA
FROM EMPLOYEES A, JOB_GRADES B
WHERE A.MANAGER_ID = 100
AND A.SALARY >= B.LOWEST_SAL
AND A.SALARY <= B.HIGHEST_SAL
ORDER BY A.EMPLOYEE_ID ASC;

--6. 80번 부서에 소속되어 있고, 80번 부서의 평균급여보다 적은 급여를 받는 사원의 아이디, 이름, 급여를 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 80
AND SALARY < (SELECT TRUNC(AVG(SALARY))
              FROM EMPLOYEES
              WHERE DEPARTMENT_ID = 80);
              
--7. 50번 부서에 소속된 사원 중에서 해당 직종의 최소급여보다 2배 이상의 급여를 받는 사원의 아이디, 이름, 급여를 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50
AND SALARY >= (SELECT MIN(SALARY)
               FROM EMPLOYEES
               WHERE DEPARTMENT_ID = 50) * 2
ORDER BY EMPLOYEE_ID ASC;

--8. 사원들 중에서 자신의 상사보다 먼저 입사한 사원의 아이디, 이름, 입사일, 상사의 이름, 상사의 입사일을 조회하기
SELECT A1.EMPLOYEE_ID, A1.FIRST_NAME, A1.HIRE_DATE, A2.FIRST_NAME, A2.HIRE_DATE
FROM EMPLOYEES A1, EMPLOYEES A2, DEPARTMENTS B
WHERE A1.DEPARTMENT_ID = B.DEPARTMENT_ID
AND A2.EMPLOYEE_ID = B.MANAGER_ID
AND A1.HIRE_DATE < A2.HIRE_DATE;

--9. Steven King과 같은 부서에서 근무하는 사원의 아이디와 이름을 조회하기 ???
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID
                       FROM EMPLOYEES
                       WHERE FIRST_NAME = 'Steven');
                       
--10. 관리자별 사원수를 조회하기, 관리자 아이디, 사원수를 출력한다. 관리자 아이디 순으로 오름차순 정렬
SELECT MANAGER_ID, COUNT(*) CNT
FROM EMPLOYEES
GROUP BY MANAGER_ID
ORDER BY MANAGER_ID DESC;

--11. 커미션을 받는 사원의 아이디, 이름, 급여, 커미션을 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, COMMISSION_PCT
FROM EMPLOYEES A
WHERE COMMISSION_PCT IS NOT NULL
ORDER BY EMPLOYEE_ID ASC;

--12. 급여를 가장 많이 받는 사원 3명의 아이디, 이름, 급여를 조회하기
SELECT ROWNUM EMPLOYEE_ID, FIRST_NAME, SALARY
FROM (SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
      FROM EMPLOYEES
      ORDER BY SALARY DESC)
WHERE ROWNUM <= 3;

--13. 'Ismael'과 같은 해에 입사했고, 같은 부서에 근무하는 사원의 아이디, 이름, 입사일을 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE TO_CHAR(HIRE_DATE, 'YYYY') = (SELECT TO_CHAR(HIRE_DATE, 'YYYY')
                                    FROM EMPLOYEES
                                    WHERE FIRST_NAME = 'Ismael')
AND DEPARTMENT_ID = (SELECT DEPARTMENT_ID
                     FROM EMPLOYEES
                     WHERE FIRST_NAME = 'Ismael');
                     
--14. 'Renske'에게 보고받는 사원의 아이디와 이름, 급여, 급여 등급을 조회하기
SELECT A2.EMPLOYEE_ID, A2.FIRST_NAME, A2.SALARY, B.GRA
FROM EMPLOYEES A, EMPLOYEES A2, DEPARTMENTS B, JOB_GRADES B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND A2.EMPLOYEE_ID = B.MANAGER_ID
AND A2.SALARY >= B.LOWEST_SAL
AND A2.SALARY <= B.HIGHEST_SAL
AND A.FIRST_NAME = 'Renske';

--15.사원테이블의 급여를 기준으로 급여등급을 조회했을 때, 급여등급별 사원수를 조회하기

--16. 입사자가 가장 적은 년도와 그 해에 입사한 사원수를 조회하기

--17. 관리자별 사원수를 조회했을 때 관리자하는 사원수가 10명을 넘는 관리자의 아이디와 사원수를 조회하기
SELECT TRUNC(MANAGER_ID, -3)MANAGER_ID, COUNT(*)
FROM EMPLOYEES
GROUP BY TRUNC(MANAGER_ID, -3)
HAVING COUNT(*) >= 10
ORDER BY MANAGER_ID;

--18. 'Europe'지역에서 근무중이 사원의 아이디, 이름, 소속부서명, 소재지 도시명, 나라이름을 조회하기
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, B.DEPARTMENT_NAME, D.CITY, C.COUNTRY_NAME
FROM EMPLOYEES A, DEPARTMENTS B, COUNTRIES C, LOCATIONS D, REGIONS E
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND B.LOCATION_ID = D.LOCATION_ID
AND D.COUNTRY_ID = C.COUNTRY_ID
AND C.REGION_ID = E.REGION_ID
AND E.REGION_NAME = 'Europe';

--19. 전체 사원의 사원아이디, 이름, 급여, 소속부서아이디, 소속부서명, 상사의 이름을 조회하기
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.SALARY, A.DEPARTMENT_ID, B.DEPARTMENT_NAME, A2.FIRST_NAME MANAGER_NAME
FROM EMPLOYEES A, EMPLOYEES A2, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND A2.EMPLOYEE_ID = B.MANAGER_ID
ORDER BY EMPLOYEE_ID ASC;

--20. 50번 부서에 근무중이 사원들의 급여를 500달러 인상시키기
UPDATE EMPLOYEES
SET
SALARY = SALARY + 500
WHERE DEPARTMENT_ID = 50;

--21. 사원의 아이디, 이름, 급여, 보너스를 조회하기,
--    보너스는 20000달러 이상은 급여의 10%, 10000달러 이상은 급여의 15%, 그 외는 급여의 20%를 지급한다.
SELECT EMPLOYEE_ID
, FIRST_NAME
, SALARY
, CASE
    WHEN SALARY >= 20000 THEN SALARY * 0.1
    WHEN SALARY >= 10000 THEN SALARY * 0.15
    ELSE SALARY * 0.2
    END AS BONUS
FROM EMPLOYEES
ORDER BY EMPLOYEE_ID;

--22. 소속부서에서 입사일이 늦지만, 더 많은 급여를 받는 사원의 이름, 입사일, 소속부서명, 급여를 조회하기

--23. 부서별 평균급여를 조회했을 때 부서별 평균급여가 10000달러 이하인 부서의 아이디, 부서명, 평균급여를
--    조회하기 (평균급여는 소숫점 1자리까지만 표시)
SELECT A.DEPARTMENT_ID, C.DEPARTMENT_NAME, B.AVG_SALARY
FROM EMPLOYEES A, (SELECT DEPARTMENT_ID DEPTID, TRUNC(AVG(SALARY)) AVG_SALARY
                   FROM EMPLOYEES
                   WHERE DEPARTMENT_ID IS NOT NULL
                   GROUP BY DEPARTMENT_ID) B, DEPARTMENTS C
WHERE A.DEPARTMENT_ID = B.DEPTID
AND A.DEPARTMENT_ID = C.DEPARTMENT_ID
AND B.AVG_SALARY <= 10000
ORDER BY A.EMPLOYEE_ID ASC;

--24. 사원들 중에서 자신 종사하고 있는 직종의 최대급여와 동일한 급여를 받는 사원의 아이디, 이름, 급여를
--    조회하기
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.SALARY
FROM EMPLOYEES A, DEPARTMENTS B, JOBS C
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND A.JOB_ID = C.JOB_ID
AND A.SALARY = C.MAX_SALARY;

----25. 분석함수를 사용해서 사원들을 급여순으로 정렬하고, 순번을 부여했을 때 6~10번째 속하는 순번,
--    사원의 아이디, 이름, 급여, 급여등급을 조회하기
SELECT NUM, A.EMPLOYEE_ID, A.FIRST_NAME, A.SALARY, B.GRA
FROM (SELECT ROW_NUMBER() OVER(ORDER BY SALARY DESC) NUM, EMPLOYEE_ID, FIRST_NAME, SALARY
      FROM EMPLOYEES) A, JOB_GRADES B
WHERE NUM >= 6 AND NUM <= 10
AND A.SALARY >= B.LOWEST_SAL
AND A.SALARY <= B.HIGHEST_SAL
ORDER BY NUM ASC;